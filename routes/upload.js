/*====================================================================================*/
/*  IMPORTACIONES
/*====================================================================================*/
const express = require('express');
const upload = require('express-fileupload');
const fileSystem = require('fs');
/*====================================================================================*/
/*  INICIALIZACIÓN DE VARIABLES
/*====================================================================================*/
const app = express();
/*====================================================================================*/
/*  INICIALIZACIÓN DE VARIABLES
/*====================================================================================*/
app.use(upload());
/*====================================================================================*/
/*  IMPORTACIÓN DE MODELOS
/*====================================================================================*/
const User = require('../models/user');
const Hospital = require('../models/hospital');
const Doctor = require('../models/doctor');
/*====================================================================================*/
/*  DEFINICION DE RUTAS
/*====================================================================================*/
/*====================================================================================*/
/*  SUBIDA DE IMAGENES
/*====================================================================================*/
app.put('/:collection/:id', (request, response) => {
  /*----------------------------------------------------------------------------------*/
  /*  Se maneja el error.
  /*----------------------------------------------------------------------------------*/
  if (!request.files) {
    return response.status(400).json({
      ok: false,
      message: 'No se seleccionó una imagen.'
    });
  }
  /*----------------------------------------------------------------------------------*/
  /*  Se extrae el contenido de la petición.
  /*----------------------------------------------------------------------------------*/
  const collection = request.params.collection;
  const id = request.params.id;
  const file = request.files.image;
  /*----------------------------------------------------------------------------------*/
  /*  Se extrae la extensión.
  /*----------------------------------------------------------------------------------*/
  const extension = file.name
    .split('.')
    .pop()
    .toLowerCase();
  /*----------------------------------------------------------------------------------*/
  /*  Se comprueba la colección.
  /*----------------------------------------------------------------------------------*/
  const collections = ['doctors', 'hospitals', 'users'];
  if (collections.indexOf(collection) < 0) {
    /*--------------------------------------------------------------------------------*/
    /*  Se maneja el error.
    /*--------------------------------------------------------------------------------*/
    return response.status(400).json({
      ok: false,
      message: 'El destino no es válido.'
    });
  }
  /*----------------------------------------------------------------------------------*/
  /*  Se comprueba la extensión.
  /*----------------------------------------------------------------------------------*/
  const extensions = ['gif', 'jpeg', 'jpg', 'png'];
  if (extensions.indexOf(extension) < 0) {
    /*--------------------------------------------------------------------------------*/
    /*  Se maneja el error.
    /*--------------------------------------------------------------------------------*/
    return response.status(400).json({
      ok: false,
      message: 'El formato de imagen no es válido.'
    });
  }
  /*----------------------------------------------------------------------------------*/
  /*  Se asigna el nombre y la ruta.
  /*----------------------------------------------------------------------------------*/
  const name = `${id}_${new Date().getMilliseconds()}.${extension}`;
  const path = `./uploads/${collection}/${name}`;
  /*----------------------------------------------------------------------------------*/
  /*  Se mueve la imagen.
  /*----------------------------------------------------------------------------------*/
  file.mv(path, error => {
    /*--------------------------------------------------------------------------------*/
    /*  Se maneja el error.
    /*--------------------------------------------------------------------------------*/
    if (error) {
      return response.status(500).json({
        ok: false,
        message: 'Ha ocurrido un error al guardar la imagen.'
      });
    }
  });
  /*----------------------------------------------------------------------------------*/
  /*  Se actualiza el registro.
  /*----------------------------------------------------------------------------------*/
  uploadByCollection(id, collection, [User, Hospital, Doctor], name, response);
});
/*====================================================================================*/
/*  CLASIFICACIÓN DE COLECCIONES
/*====================================================================================*/
let uploadByCollection = (id, collection, models, name, response) => {
  /*----------------------------------------------------------------------------------*/
  /*  Se obtienen los resultados.
  /*----------------------------------------------------------------------------------*/
  switch (collection) {
    /*--------------------------------------------------------------------------------*/
    /*  Se editan los usuarios.
    /*--------------------------------------------------------------------------------*/
    case 'users':
      uploadRegistry(id, collection, models[0], name, response);
      break;
    /*--------------------------------------------------------------------------------*/
    /*  Se editan los hospitales.
    /*--------------------------------------------------------------------------------*/
    case 'hospitals':
      uploadRegistry(id, collection, models[1], name, response);
      break;
    /*--------------------------------------------------------------------------------*/
    /*  Se editan los doctores.
    /*--------------------------------------------------------------------------------*/
    case 'doctors':
      uploadRegistry(id, collection, models[2], name, response);
      break;
  }
};
/*====================================================================================*/
/*  ACTUALIZACIÓN DEL REGISTRO
/*====================================================================================*/
let uploadRegistry = (id, collection, model, name, response) => {
  /*----------------------------------------------------------------------------------*/
  /*  Se busca el registro.
  /*----------------------------------------------------------------------------------*/
  model.findById(id, (error, registry) => {
    /*--------------------------------------------------------------------------------*/
    /*  Se maneja el error.
    /*--------------------------------------------------------------------------------*/
    if (!registry) {
      return response.status(400).json({
        ok: false,
        message: 'El usuario no existe.'
      });
    }
    /*--------------------------------------------------------------------------------*/
    /*  Se extrae la ruta de la imagen (si existe).
    /*--------------------------------------------------------------------------------*/
    var existent = `./uploads/${collection}/${registry.image}`;
    /*--------------------------------------------------------------------------------*/
    /*  Se elimina la imagen anterior (si existe).
    /*--------------------------------------------------------------------------------*/
    if (fileSystem.existsSync(existent)) {
      fileSystem.unlinkSync(existent);
    }
    /*--------------------------------------------------------------------------------*/
    /*  Se le asigna el nuevo valor al registro.
    /*--------------------------------------------------------------------------------*/
    registry.image = name;
    /*--------------------------------------------------------------------------------*/
    /*  Se guarda el registro.
    /*--------------------------------------------------------------------------------*/
    registry.save((error, saved) => {
      /*------------------------------------------------------------------------------*/
      /*  Se maneja el error.
      /*------------------------------------------------------------------------------*/
      if (error) {
        return response.status(500).json({
          ok: false,
          message: 'Ha ocurrido un error al guardar la imagen.',
          errors: error
        });
      }
      /*------------------------------------------------------------------------------*/
      /*  Se envía el mensaje de éxito.
      /*------------------------------------------------------------------------------*/
      response.status(200).json({
        ok: true,
        message: 'El registro se editó exitosamente.',
        [collection]: saved
      });
    });
  });
};
/*====================================================================================*/
/*  EXPORTACIÓN DEL MODULO
/*====================================================================================*/
module.exports = app;
