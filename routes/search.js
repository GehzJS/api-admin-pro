/*====================================================================================*/
/*  IMPORTACIONES
/*====================================================================================*/
const express = require('express');
/*====================================================================================*/
/*  INICIALIZACIÓN DE VARIABLES
/*====================================================================================*/
const app = express();
/*====================================================================================*/
/*  IMPORTACIÓN DE MODELOS
/*====================================================================================*/
const User = require('../models/user');
const Hospital = require('../models/hospital');
const Doctor = require('../models/doctor');
/*====================================================================================*/
/*  DEFINICION DE RUTAS
/*====================================================================================*/
/*====================================================================================*/
/*  BÚSQUEDA GENERAL
/*====================================================================================*/
app.get('/all/:keywords', (request, response, next) => {
  /*----------------------------------------------------------------------------------*/
  /*  Se extrae el contenido de la petición.
  /*----------------------------------------------------------------------------------*/
  let keywords = request.params.keywords;
  /*----------------------------------------------------------------------------------*/
  /*  Se pasa el término de búsqueda a minúsculas para aumentar los resulatdos.
  /*----------------------------------------------------------------------------------*/
  let regex = new RegExp(keywords, 'i');
  /*----------------------------------------------------------------------------------*/
  /*  Se obtienen los resultados.
  /*----------------------------------------------------------------------------------*/
  Promise.all([
    searchData(keywords, regex, User),
    searchData(keywords, regex, Hospital),
    searchData(keywords, regex, Doctor)
  ]).then(responses => {
    /*--------------------------------------------------------------------------------*/
    /*  Se envía la respuesta de éxito.
    /*--------------------------------------------------------------------------------*/
    response.status(200).json({
      ok: true,
      users: responses[0],
      hospitals: responses[1],
      doctors: responses[2]
    });
  });
});
/*====================================================================================*/
/*  BÚSQUEDA POR COLECCIÓN
/*====================================================================================*/
app.get('/collection/:collection/:keywords', (request, response) => {
  /*----------------------------------------------------------------------------------*/
  /*  Se extrae el contenido de la petición.
  /*----------------------------------------------------------------------------------*/
  let collection = request.params.collection;
  let keywords = request.params.keywords;
  /*----------------------------------------------------------------------------------*/
  /*  Se pasa el término de búsqueda a minúsculas para aumentar los resulatdos.
  /*----------------------------------------------------------------------------------*/
  let regex = new RegExp(keywords, 'i');
  /*----------------------------------------------------------------------------------*/
  /*  Se verifica que el nombre de la colección se válido.
  /*----------------------------------------------------------------------------------*/
  const collections = ['doctors', 'hospitals', 'users'];
  if (collections.indexOf(collection) < 0) {
    /*--------------------------------------------------------------------------------*/
    /*  Se maneja el error.
    /*--------------------------------------------------------------------------------*/
    return response.status(400).json({
      ok: false,
      message: 'El destino no es válido.'
    });
  }
  /*----------------------------------------------------------------------------------*/
  /*  Se obtienen los resultados.
  /*----------------------------------------------------------------------------------*/
  let promise;
  switch (collection) {
    /*----------------------------------------------------------------------------------*/
    /*  Se buscan los usuarios.
    /*----------------------------------------------------------------------------------*/
    case 'users':
      promise = searchData(keywords, regex, User);
      break;
    /*----------------------------------------------------------------------------------*/
    /*  Se buscan los hospitales.
    /*----------------------------------------------------------------------------------*/
    case 'hospitals':
      promise = searchData(keywords, regex, Hospital);
      break;
    /*----------------------------------------------------------------------------------*/
    /*  Se buscan los doctores.
    /*----------------------------------------------------------------------------------*/
    case 'doctors':
      promise = searchData(keywords, regex, Doctor);
      break;
    /*----------------------------------------------------------------------------------*/
    /*  Se maneja el error.
    /*----------------------------------------------------------------------------------*/
    default:
      return response.status(400).json({
        ok: false,
        message: 'Error al obtener los registros.'
      });
  }
  promise
    .then(data => {
      /*--------------------------------------------------------------------------------*/
      /*  Se envía la respuesta de éxito.
      /*--------------------------------------------------------------------------------*/
      response.status(200).json({
        ok: true,
        [collection]: data
      });
    })
    .catch(error => {
      /*--------------------------------------------------------------------------------*/
      /*  Se maneja el error.
      /*--------------------------------------------------------------------------------*/
      return response.status(500).json({
        ok: false,
        message: 'Error al obtener los registros.',
        errors: error
      });
    });
});
/*====================================================================================*/
/*  BÚSQUEDA DE REGISTROS
/*====================================================================================*/
let searchData = (keyword, regex, model) => {
  /*----------------------------------------------------------------------------------*/
  /*  Se retornan los resultados en forma de promesa.
  /*----------------------------------------------------------------------------------*/
  return new Promise((resolve, reject) => {
    /*--------------------------------------------------------------------------------*/
    /*  Se retornan realiza la búsqueda.
    /*--------------------------------------------------------------------------------*/
    model
      .find({ name: regex })
      // .or([{ name: regex }, { email: regex }])
      .exec((error, data) => {
        /*-----------------------------------------------------------------------------*/
        /*  Se maneja el error.
        /*-----------------------------------------------------------------------------*/
        if (error) {
          reject('Error al cargar los usuarios');
        } else {
          /*---------------------------------------------------------------------------*/
          /*  Se envían los resultados.
        /*---------------------------------------------------------------------------*/
          resolve(data);
        }
      });
  });
};
/*====================================================================================*/
/*  EXPORTACIÓN DEL MODULO
/*====================================================================================*/
module.exports = app;
